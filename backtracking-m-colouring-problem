#include <iostream>
using namespace std;

int V=4;

bool isSafe(int v, int** graph, int* color, int c) {
    for (int i = 0; i < V; i++) {
        if (graph[v][i] == 1 && c == color[i]) {
            return false;
        }
    }
    return true;
}

bool graphColorMap(int** graph, int m, int* color, int v) {
    if (v == V) {
        return true;
    }
    for (int c = 1; c <= m; c++) {
        if (isSafe(v, graph, color, c)) {
            color[v] = c;
            if (graphColorMap(graph, m, color, v + 1)) {
                return true;
            }
            color[v] = 0;
        }
    }
    return false;
}

bool graphColouring(int** graph, int m, int* color) {
    if (!graphColorMap(graph, m, color, 0)) {
        cout << "Solution does not exist";
        return false;
    }
    cout<<"Solution Exists:\n";
    for (int i = 0; i < V; i++) {
        cout << color[i] << " ";
    }
    return true;
}

int main() {
    int** graph = new int*[V];
    for (int i = 0; i < V; i++) {
        graph[i] = new int[V];
    }
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            cin >> graph[i][j];
        }
    }
    int m;
    cin >> m;
    int color[V] = {0};
    graphColouring(graph, m, color);
}
