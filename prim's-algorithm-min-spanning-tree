#include<iostream>
#include<climits>
using namespace std;

int minKey(int key[],bool mstSet[],int V){//this function is to find min edge from starting vertex and returns the starting vetrtex as min_idx
    int min=INT_MAX;
    int min_idx;
    for(int v=0;v<V;v++){
        if(mstSet[v]==false&&key[v]<min){
            min=key[v];
            min_idx=v;
        }
    }
    return min_idx;
}

void primsMST(int graph[][10],int V){//sets the value of starting vertex and ending vertex and ending vertex where the min edge occurs
    int key[V];
    int parent[V];
    bool mstSet[V];
    for(int i=0;i<V;i++){
        key[i]=INT_MAX;
        mstSet[i]=false;
    }
    key[0]=0;
    parent[0]=-1;
    for(int count=0;count<V-1;count++){
        int u=minKey(key,mstSet,V);//us is starting vertex of min edge which is returned from minkey
        mstSet[u]=true;
        for(int v=0;v<V;v++){
            if(graph[u][v]&&mstSet[v]==false&&graph[u][v]<key[v]){
                key[v]=graph[u][v];
                parent[v]=u;//parent[v] stores the starting vertex if condition passes
            }
        }
        //print the vertex and edges of minimum spanning tree
        for(int i=1;i<V;i++){
            cout<<parent[i]<<" "<<i<<" "<<graph[i][parent[i]]<<endl;
        }
    }
}

int main(){
    int V;
    cin>>V;
    int graph[10][10];
    for(int i=0;i<V;i++){
        for(int j=0;j<V;j++){
            cin>>graph[i][j];
        }
    }
    primsMST(graph,V);
}
