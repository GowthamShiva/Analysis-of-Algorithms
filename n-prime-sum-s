#include <iostream>
#include <vector>
#include <cmath>
using namespace std;
vector<int> set;
vector<int> primeNo;
bool isPrimeNumber(int x) {
   int sqroot = sqrt(x);
   bool flag = true;
   if (x == 1)
      return false;
   for (int i = 2; i <= sqroot; i++)
      if (x % i == 0)
         return false;
   return true;
}
void printPrimes() {
   int length = set.size();
   for (int i=0; i<length; i++)
   cout<<set[i]<<"\t";
   cout<<endl;
}
void GeneratePrimeSum(int total, int N, int S, int index) {
   if (total == S && set.size() == N) {
      printPrimes();
      return;
   }
   if (total > S || index == primeNo.size())
   return;
   set.push_back(primeNo[index]);
   GeneratePrimeSum(total+primeNo[index], N, S, index+1);
   set.pop_back();
   GeneratePrimeSum(total, N, S, index+1);
}
void PrimesWithSum(int N, int S, int P) {
   for (int i = P+1; i <=S ; i++) {
      if (isPrimeNumber(i))
      primeNo.push_back(i);
   }
   if (primeNo.size() < N)
   return;
   GeneratePrimeSum(0, N, S, 0);
}
int main() {
   int S,N,P;
   cin>>S>>N>>P;
   cout<<N<<" Prime numbers greater than "<<P<<" with sum = "<<S<<" are :\n";
   PrimesWithSum(N, S, P);
   return 0;
}
